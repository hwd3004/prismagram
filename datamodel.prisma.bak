type User {
  id: ID! @id
  username : String! @unique
  email : String! @unique
  firstName : String @default(value: "")
  lastName: String
  fullName : String
  isFollowing : Boolean!
  isSelf : Boolean!
  bio : String
  followers : [User!]! @relation(name: "FollowRelation")
  following : [User!]! @relation(name: "FollowRelation")
  posts : [Post!]! @relation(name: "PostsOfUSer", onDelete: CASCADE)
  likes : [Like!]! @relation(name: "LikesOfUSer", onDelete: CASCADE)
  comments : [Comment!]! @relation(name: "CommentsOfUSer", onDelete: CASCADE)
  rooms : [Room!]! @relation(name: "RoomsOfUSer", onDelete: CASCADE)
  loginSecret : String
}

type Post {
  id: ID! @id
  location : String
  caption : String!
  user : User @relation(name: "PostsOfUSer")
  files : [File!]! @relation(name: "FilesOfPost", onDelete: CASCADE)
  likes : [Like!]! @relation(name: "LikesOfPost", onDelete: CASCADE)
  comments : [Comment!]! @relation(name: "CommentsOfUSer")
}

type Like {
  id: ID! @id
  user : User @relation(name: "LikesOfUSer")
  post : Post @relation(name : "LikesOfPost")
}

type Comment {
  id: ID! @id
  text : String!
  user : User @relation(name: "CommentsOfUSer")
  post : Post @relation(name: "CommentsOfUSer")
}

type File {
  id: ID! @id
  url : String!
  post : Post @relation(name: "FilesOfPost")
}

type Room {
  id : ID! @id
  participants : [User!]!
  messages : [Message!]!
}

type Message {
  id : ID! @id
  text : String!
  from : User! @relation(name: "From")
  to : User! @relation(name: "To")
  room : Room!
}

type UserProfile {
    user : User!
    posts : [Post!]!
}